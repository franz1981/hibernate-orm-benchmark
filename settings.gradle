/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

pluginManagement {
    // Include 'plugins build' to define convention plugins.
    includeBuild('build-logic')
}

dependencyResolutionManagement {
    versionCatalogs {
        dbLibs {
            def h2Version = version "h2", overrideableVersion( "gradle.libs.versions.h2", "2.2.224" )

            def db2Version = version "db2", "11.5.9.0"
            // Latest Derby version 10.16.1.1 only supports JDK 17+, but 10.15.2 should be compatible
            def derbyVersion = version "derby", overrideableVersion( "gradle.libs.versions.derby", "10.15.2.0" )
            def firebirdVersion = version "firebird", "4.0.8.java11"
            def hanaVersion = version "hana", "2.19.11"
            def h2gisVersion = version "h2gis", overrideableVersion( "gradle.libs.versions.h2gis", "2.2.0" )
            def hsqldbVersion = version "hsqldb", overrideableVersion( "gradle.libs.versions.hsqldb", "2.7.2" )
            def informixVersion = version "informix", "4.50.10.1"
            def mariadbVersion = version "mariadb", "3.4.0"
            def mssqlVersion = version "mssql", "12.4.2.jre11"
            def mysqlVersion = version "mysql", "8.2.0"
            def oracleVersion = version "oracle", "23.4.0.24.05"
            def oracleLegacyVersion = version "oracleLegacy", "11.2.0.4"
            def pgsqlVersion = version "pgsql", "42.7.1"
            def sybaseVersion = version "sybase", "1.3.1"
            def tidbVersion = version "tidb", mysqlVersion
            def altibaseVersion = version "altibase", "7.3.0.0.3"

            library( "h2", "com.h2database", "h2" ).versionRef( h2Version )
            library( "h2gis", "org.orbisgis", "h2gis" ).versionRef( h2gisVersion )
            library( "hsqldb", "org.hsqldb", "hsqldb" ).versionRef( hsqldbVersion )
            library( "derby", "org.apache.derby", "derby" ).versionRef( derbyVersion )
            library( "derbyTools", "org.apache.derby", "derbytools" ).versionRef( derbyVersion )
            library( "postgresql", "org.postgresql", "postgresql" ).versionRef( pgsqlVersion )
            library( "cockroachdb", "org.postgresql", "postgresql" ).versionRef( pgsqlVersion )
            library( "mysql", "com.mysql", "mysql-connector-j" ).versionRef( mysqlVersion )
            library( "tidb", "com.mysql", "mysql-connector-j" ).versionRef( tidbVersion )
            library( "mariadb", "org.mariadb.jdbc", "mariadb-java-client" ).versionRef( mariadbVersion )
            library( "oracle", "com.oracle.database.jdbc", "ojdbc11" ).versionRef( oracleVersion )
            library( "oracleXml", "com.oracle.database.xml", "xdb" ).versionRef( oracleVersion )
            library( "oracleXmlParser", "com.oracle.database.xml", "xmlparserv2" ).versionRef( oracleVersion )
            library( "mssql", "com.microsoft.sqlserver", "mssql-jdbc" ).versionRef( mssqlVersion )
            library( "db2", "com.ibm.db2", "jcc" ).versionRef( db2Version )
            library( "hana", "com.sap.cloud.db.jdbc", "ngdbc" ).versionRef( hanaVersion )
            library( "sybase", "net.sourceforge.jtds", "jtds" ).versionRef( sybaseVersion )
            library( "informix", "com.ibm.informix", "jdbc" ).versionRef( informixVersion )
            library( "firebird", "org.firebirdsql.jdbc", "jaybird" ).versionRef( firebirdVersion )
            library( "altibase", "com.altibase", "altibase-jdbc" ).versionRef( altibaseVersion )
        }
    }
}

String overrideableVersion(String settingName, String defaultVersion) {
    String overridden = settings.ext.find( settingName )
    if ( overridden != null ) {
        return overridden
    }
    return defaultVersion
}

rootProject.name = 'hibernate-orm-benchmark-parent'
include(':hibernate-orm-benchmark-basic')
project(":hibernate-orm-benchmark-basic").projectDir = file('basic')
